# function to get data
returnResults <- function(sim_data){
holdvec <- c()
# get metrics
TP = sum(sim_data[sim_data$infected == 1,]$prob2>=.5)
FP = sum(sim_data[sim_data$infected != 1,]$prob2>=.5)
FN = sum(sim_data[sim_data$infected == 1,]$prob2<.5)
TN = sum(sim_data[sim_data$infected != 1,]$prob2<.5)
# compute metrics
sensitivity = TP/(TP+FN)
specificity = TN/(TN+FP)
F1val = (2*TP)/(2*TP + FP + FN)
AUC = (auc(sim_data$infected,sim_data$prob2))[1]
holdvec <- c(holdvec,c(sensitivity,specificity,F1val,AUC))
return(holdvec)
}
# label which elements are training vs testing
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$i),replace = T)
##### all data more noise  #####
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_noise_more.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
for(i in 1:4){
nP = 3
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_more_nonLog_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
print(mean(posterior[,,"beta1[1]"]))
color_scheme_set("mix-blue-red")
np <- nuts_params(stanout)
print(mcmc_trace(posterior, pars = c("beta0[1]","beta1[1]","sigma0[1]","sigma1[1]",
"r[1,1]","r[1,2]","r[2,1]","r[2,2]",
"theta[1]","theta[2]","L[1,1,1]","L[2,1,1]"),np = np))
# check if there are divergent samples
if(sum(stanout$diagnostic_summary()$num_divergent)>0){
print(paste0("There are ",sum(stanout$diagnostic_summary()$num_divergent)," divergent sequences in run #",i))
}
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
LL[i] <- median(posterior[,,"lp__"])
}
allResults <- rbind(allResults,c("Sim all - more noise",returnResults(sim_data)))
# IgG
for(i in 1:4){
nP = 1
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_more_nonLog_IgG_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
print(mean(posterior[,,"beta1[1]"]))
color_scheme_set("viridis")
np <- nuts_params(stanout)
print(mcmc_trace(posterior, pars = c("beta0[1]","beta1[1]","sigma0[1]","sigma1[1]",
"r[1,1]","r[1,2]","r[2,1]","r[2,2]",
"theta[1]","theta[2]","L[1,1,1]","L[2,1,1]"),np = np))
# check if there are divergent samples
if(sum(stanout$diagnostic_summary()$num_divergent)>0){
print(paste0("There are ",sum(stanout$diagnostic_summary()$num_divergent)," divergent sequences in run #",i))
}
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
LL[i] <- median(posterior[,,"lp__"])
}
allResults <- rbind(allResults,c("Sim IgG - more noise",returnResults(sim_data)))
# IgM
for(i in 1:4){
nP = 1
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_more_nonLog_IgM_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
print(mean(posterior[,,"beta1[1]"]))
color_scheme_set("viridis")
np <- nuts_params(stanout)
print(mcmc_trace(posterior, pars = c("beta0[1]","beta1[1]","sigma0[1]","sigma1[1]",
"r[1,1]","r[1,2]","r[2,1]","r[2,2]",
"theta[1]","theta[2]","L[1,1,1]","L[2,1,1]"),np = np))
# check if there are divergent samples
if(sum(stanout$diagnostic_summary()$num_divergent)>0){
print(paste0("There are ",sum(stanout$diagnostic_summary()$num_divergent)," divergent sequences in run #",i))
}
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
LL[i] <- median(posterior[,,"lp__"])
}
allResults <- rbind(allResults,c("Sim IgM - more noise",returnResults(sim_data)))
# HAI
for(i in 1:4){
nP = 1
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_more_nonLog_HAI_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
print(mean(posterior[,,"beta1[1]"]))
color_scheme_set("viridis")
np <- nuts_params(stanout)
print(mcmc_trace(posterior, pars = c("beta0[1]","beta1[1]","sigma0[1]","sigma1[1]",
"r[1,1]","r[1,2]","r[2,1]","r[2,2]",
"theta[1]","theta[2]","L[1,1,1]","L[2,1,1]"),np = np))
# check if there are divergent samples
if(sum(stanout$diagnostic_summary()$num_divergent)>0){
print(paste0("There are ",sum(stanout$diagnostic_summary()$num_divergent)," divergent sequences in run #",i))
}
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
LL[i] <- median(posterior[,,"lp__"])
}
allResults <- rbind(allResults,c("Sim HAI - more noise",returnResults(sim_data)))
##### all data most noise  #####
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_noise_even_more.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
for(i in 1:4){
nP = 3
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_even_more_nonLog_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
print(mean(posterior[,,"beta1[1]"]))
color_scheme_set("mix-blue-red")
np <- nuts_params(stanout)
print(mcmc_trace(posterior, pars = c("beta0[1]","beta1[1]","sigma0[1]","sigma1[1]",
"r[1,1]","r[1,2]","r[2,1]","r[2,2]",
"theta[1]","theta[2]","L[1,1,1]","L[2,1,1]"),np = np))
# check if there are divergent samples
if(sum(stanout$diagnostic_summary()$num_divergent)>0){
print(paste0("There are ",sum(stanout$diagnostic_summary()$num_divergent)," divergent sequences in run #",i))
}
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
LL[i] <- median(posterior[,,"lp__"])
}
setwd("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data")
## Install and load serosim along with other packages #####
library(serosim)
library(tidyverse)
library(ggplot2)
library(patchwork)
library(reshape2)
library(tibble)
source("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/runserosim_updated.R", echo=TRUE)
##### #####
times <- seq(1,365,by=1) # simulate monthly data for 1 year
N=500 # nubmer of indviduals simulated
demography <- generate_pop_demography(N=N, times=times, prob_removal=0,birth_times = 2) # 100 individuals
## Create biomarker map
biomarker_map_original <- tibble(exposure_id=c("ifxn","ifxn","ifxn"),biomarker_id=c("HAI","IgG","IgM"))
## Reformat biomarker_map for runserosim
biomarker_map <-reformat_biomarker_map(biomarker_map_original)
## Create an empty array to store the force of exposure for all exposure types
foe_pars <- array(0, dim=c(1,max(times),n_distinct(biomarker_map$exposure_id)))
## Specify the force of exposure for exposure ID 1 which represents natural infection
foe_pars[,1:200,1] <- (.007+.001*cos(2*pi*c(1:200)/400))
foe_pars[,331:335,1] <- .09
## Bring in the antibody parameters needed for the antibody model
## Note that the observation error parameter needed for the observation model (Section 1.7) is defined here too.
model_pars_path <- system.file("extdata", "model_pars_cs2.csv", package = "serosim")
model_pars_original <- read.csv(file = model_pars_path, header = TRUE)
model_pars_original <- model_pars_original[1,]
# model_pars_original[1,] <- c("ifxn","HAI","boost_long",1500,1000,"log-normal")
# model_pars_original[2,] <- c("ifxn","HAI","boost_short",600,500,"log-normal")
# model_pars_original[3,] <- c("ifxn","HAI","wane_long",.001,.0001,"log-normal")
# model_pars_original[4,] <- c("ifxn","HAI","wane_short",.02,.001,"log-normal")
# model_pars_original[5,] <- c("ifxn","HAI","biomarker_prot_midpoint",10000,NA,"")
# model_pars_original[6,] <- c("ifxn","HAI","biomarker_prot_width",.0001,NA,"")
# model_pars_original[7,] <- c(NA,"HAI","obs_sd",NA,50,"normal")
model_pars_original[1,] <- c("ifxn","HAI","boost_long",4,1,"log-normal")
model_pars_original[2,] <- c("ifxn","HAI","boost_short",0.75,.1,"log-normal")
model_pars_original[3,] <- c("ifxn","HAI","wane_long",.0001,.0001,"log-normal")
model_pars_original[4,] <- c("ifxn","HAI","wane_short",.005,.001,"log-normal")
model_pars_original[5,] <- c("ifxn","HAI","biomarker_prot_midpoint",8,NA,"")
model_pars_original[6,] <- c("ifxn","HAI","biomarker_prot_width",.8,NA,"")
model_pars_original[7,] <- c(NA,"HAI","obs_sd",NA,.05,"normal")
model_pars_original[8,] <- c("ifxn","IgG","boost_long",5,30,"log-normal")
model_pars_original[9,] <- c("ifxn","IgG","boost_short",80,30,"log-normal")
model_pars_original[10,] <- c("ifxn","IgG","wane_long",.005,.005,"log-normal")
model_pars_original[11,] <- c("ifxn","IgG","wane_short",.02,.05,"log-normal")
model_pars_original[12,] <- c(NA,"IgG","obs_sd",NA,1.5,"normal")
model_pars_original[13,] <- c("ifxn","IgM","boost_long",5,30,"log-normal")
model_pars_original[14,] <- c("ifxn","IgM","boost_short",50,70,"log-normal")
model_pars_original[15,] <- c("ifxn","IgM","wane_long",.005,.005,"log-normal")
model_pars_original[16,] <- c("ifxn","IgM","wane_short",.0075,.05,"log-normal")
model_pars_original[17,] <- c(NA,"IgM","obs_sd",NA,2.5,"normal")
model_pars_original[18,] <- c("ifxn","HAI","biomarker_ceiling_threshold",10,NA,"")
model_pars_original[19,] <- c("ifxn","HAI","biomarker_ceiling_gradient",.15,NA,"")
model_pars_original[20,] <- c("ifxn","IgG","biomarker_ceiling_threshold",80,NA,"")
model_pars_original[21,] <- c("ifxn","IgG","biomarker_ceiling_gradient",.01,NA,"")
model_pars_original[22,] <- c("ifxn","IgM","biomarker_ceiling_threshold",75,NA,"")
model_pars_original[23,] <- c("ifxn","IgM","biomarker_ceiling_gradient",.01,NA,"")
model_pars<-reformat_biomarker_map(model_pars_original)
model_pars
model_pars$mean <- as.numeric(model_pars$mean)
model_pars$sd <- as.numeric(model_pars$sd)
bounds<-tibble(biomarker_id=c(1,1,2,2,3,3),name=rep(c("lower_bound","upper_bound"),3),
value=c(log2(10),log2(20480),0,(500+1),0,(500+1)))
set.seed(1)
res<- runserosim_update(
simulation_settings=list("t_start"=1,"t_end"=max(times)),
demography,
observation_times=tibble(i=rep(1:max(demography$i),each=3),t=rep(c(250,330,365),N)),
foe_pars,
biomarker_map,
model_pars,
exposure_model=exposure_model_fixed,
immunity_model=immunity_model_ifxn_biomarker_prot,
antibody_model=antibody_model_biphasic,
observation_model=observation_model_continuous_bounded_noise,
draw_parameters=draw_parameters_random_fx_biomarker_dep,
VERBOSE = T,
## Other arguments needed
max_events=c(4),
bounds=bounds
)
#
# # protection from HAI
# plot_biomarker_mediated_protection(seq(0,12,by=0.1), biomarker_prot_midpoint=8, biomarker_prot_width=.8)
#
# # prob infection across tiem
# plot_exposure_force(res$exposure_force_long)
#
# # individual successful exposures across time
# plot_immune_histories(res$immune_histories_long)
#
# # individual biomarker quantity across time
# plot_biomarker_quantity(res$biomarker_states)
#
# ## Plot biomarker 1 kinetics and immune histories for 10 individuals
# plot_subset_individuals_history(res$biomarker_states %>%
#                                   filter(b == 1), res$immune_histories_long, subset=10, demography, removal=TRUE)
#
# ## Plot biomarker 2 kinetics and immune histories for 10 individuals
# plot_subset_individuals_history(res$biomarker_states %>%
#                                   filter(b == 2), res$immune_histories_long, subset=10, demography, removal=TRUE)
#
# ## Plot biomarker 2 kinetics and immune histories for 10 individuals
# plot_subset_individuals_history(res$biomarker_states %>%
#                                   filter(b == 3), res$immune_histories_long, subset=10, demography, removal=TRUE)
## turn into the format we are using in the mixture model approach
observed_states <- res$observed_biomarker_states
observed_states <- reshape(observed_states[,-4],idvar=c("i","b"),timevar = c("t"),direction="wide")
observed_states <- reshape(observed_states,idvar=c("i"),timevar = c("b"),direction="wide")
names(observed_states) <- c("i","HAI_t1","HAI_t2","HAI_t3","IgG_t1","IgG_t2","IgG_t3","IgM_t1","IgM_t2","IgM_t3")
infectedHosts <- res$immune_histories_long[(res$immune_histories_long$t>300)&(res$immune_histories_long$value==1),]$i
observed_states <- observed_states %>% mutate(infected = if_else(i %in% infectedHosts,1,0))
observed_states <- observed_states %>% mutate(numInfections = rowSums(data.frame(res$immune_histories),na.rm = T))
# get a true state (aka no noise result)
true_states <- res$observed_biomarker_states
true_states <- reshape(true_states[,-5],idvar=c("i","b"),timevar = c("t"),direction="wide")
true_states <- reshape(true_states,idvar=c("i"),timevar = c("b"),direction="wide")
names(true_states) <- c("i","HAI_t1","HAI_t2","HAI_t3","IgG_t1","IgG_t2","IgG_t3","IgM_t1","IgM_t2","IgM_t3")
true_states <- true_states %>% mutate(infected = if_else(i %in% infectedHosts,1,0))
true_states <- true_states %>% mutate(numInfections = rowSums(data.frame(res$immune_histories),na.rm = T))
# plot each biomarker pre/post infection
p1 <- ggplot(observed_states,aes(x=HAI_t2,y=HAI_t3,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = 'log2') +
scale_y_continuous(trans = 'log2') +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p2 <- ggplot(observed_states,aes(x=IgG_t2+1,y=IgG_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p3 <- ggplot(observed_states,aes(x=IgM_t2+1,y=IgM_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p1 + p2 + p3 + plot_layout(guides = "collect")
# plot each biomarker pre/post infection
p1 <- ggplot(true_states,aes(x=HAI_t2,y=HAI_t3,col=as.factor(infected))) +
geom_point()  +
scale_x_continuous(trans = 'log2') +
scale_y_continuous(trans = 'log2') +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p2 <- ggplot(true_states,aes(x=IgG_t2+1,y=IgG_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p3 <- ggplot(true_states,aes(x=IgM_t2+1,y=IgM_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p1 + p2 + p3 + plot_layout(guides = "collect")
# plot indiv trajectories
p1 <- res$observed_biomarker_states %>% filter(b==1) %>% ggplot(aes(x=t,y=observed)) +
geom_line() + xlim(c(0,13)) + ylim(c(0,13)) + theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p2 <- ggplot(observed_states,aes(x=IgG_t2,y=IgG_t3,col=as.factor(infected))) +
geom_point() + xlim(c(0,150)) + ylim(c(0,3)) + theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p3 <- ggplot(observed_states,aes(x=IgM_t2,y=IgM_t3,col=as.factor(infected))) +
geom_point() + xlim(c(0,3)) + ylim(c(0,3)) + theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p1 + p2 + p3 + plot_layout(guides = "collect")
## save data
saveRDS(observed_states,"sim_noise_nonLog.RDS")
saveRDS(true_states,"sim_groundTruth_nonLog.RDS")
##### re-run with more noise #####
# in particular we are going to bump up the variation in all standard deviations related to boosting and waning by 50%
model_pars_original[1,] <- c("ifxn","HAI","boost_long",4,1,"log-normal")
model_pars_original[2,] <- c("ifxn","HAI","boost_short",0.75,.1,"log-normal")
model_pars_original[3,] <- c("ifxn","HAI","wane_long",.0001,.0001,"log-normal")
model_pars_original[4,] <- c("ifxn","HAI","wane_short",.005,.001,"log-normal")
model_pars_original[5,] <- c("ifxn","HAI","biomarker_prot_midpoint",8,NA,"")
model_pars_original[6,] <- c("ifxn","HAI","biomarker_prot_width",.8,NA,"")
model_pars_original[7,] <- c(NA,"HAI","obs_sd",NA,.15,"normal")
model_pars_original[8,] <- c("ifxn","IgG","boost_long",5,30,"log-normal")
model_pars_original[9,] <- c("ifxn","IgG","boost_short",80,30,"log-normal")
model_pars_original[10,] <- c("ifxn","IgG","wane_long",.005,.005,"log-normal")
model_pars_original[11,] <- c("ifxn","IgG","wane_short",.02,.05,"log-normal")
model_pars_original[12,] <- c(NA,"IgG","obs_sd",NA,2.5,"normal")
model_pars_original[13,] <- c("ifxn","IgM","boost_long",5,30,"log-normal")
model_pars_original[14,] <- c("ifxn","IgM","boost_short",50,70,"log-normal")
model_pars_original[15,] <- c("ifxn","IgM","wane_long",.005,.005,"log-normal")
model_pars_original[16,] <- c("ifxn","IgM","wane_short",.0075,.05,"log-normal")
model_pars_original[17,] <- c(NA,"IgM","obs_sd",NA,5,"normal")
model_pars_original[18,] <- c("ifxn","HAI","biomarker_ceiling_threshold",10,NA,"")
model_pars_original[19,] <- c("ifxn","HAI","biomarker_ceiling_gradient",.15,NA,"")
model_pars_original[20,] <- c("ifxn","IgG","biomarker_ceiling_threshold",80,NA,"")
model_pars_original[21,] <- c("ifxn","IgG","biomarker_ceiling_gradient",.01,NA,"")
model_pars_original[22,] <- c("ifxn","IgM","biomarker_ceiling_threshold",75,NA,"")
model_pars_original[23,] <- c("ifxn","IgM","biomarker_ceiling_gradient",.01,NA,"")
model_pars<-reformat_biomarker_map(model_pars_original)
model_pars$mean <- as.numeric(model_pars$mean)
model_pars$sd <- as.numeric(model_pars$sd)
set.seed(1)
res<- runserosim_update(
simulation_settings=list("t_start"=1,"t_end"=max(times)),
demography,
observation_times=tibble(i=rep(1:max(demography$i),each=3),t=rep(c(250,330,365),N)),
foe_pars,
biomarker_map,
model_pars,
exposure_model=exposure_model_fixed,
immunity_model=immunity_model_ifxn_biomarker_prot,
antibody_model=antibody_model_biphasic,
observation_model=observation_model_continuous_bounded_noise,
draw_parameters=draw_parameters_random_fx_biomarker_dep,
VERBOSE = T,
## Other arguments needed
max_events=c(4),
bounds=bounds
)
# get into right format and save as RDS
observed_states <- res$observed_biomarker_states
observed_states <- reshape(observed_states[,-4],idvar=c("i","b"),timevar = c("t"),direction="wide")
observed_states <- reshape(observed_states,idvar=c("i"),timevar = c("b"),direction="wide")
names(observed_states) <- c("i","HAI_t1","HAI_t2","HAI_t3","IgG_t1","IgG_t2","IgG_t3","IgM_t1","IgM_t2","IgM_t3")
infectedHosts <- res$immune_histories_long[(res$immune_histories_long$t>300)&(res$immune_histories_long$value==1),]$i
observed_states <- observed_states %>% mutate(infected = if_else(i %in% infectedHosts,1,0))
observed_states <- observed_states %>% mutate(numInfections = rowSums(data.frame(res$immune_histories),na.rm = T))
# plot each biomarker pre/post infection
p1 <- ggplot(observed_states,aes(x=HAI_t2,y=HAI_t3,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = 'log2') +
scale_y_continuous(trans = 'log2') +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p2 <- ggplot(observed_states,aes(x=IgG_t2+1,y=IgG_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p3 <- ggplot(observed_states,aes(x=IgM_t2+1,y=IgM_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p1 + p2 + p3 + plot_layout(guides = "collect")
saveRDS(observed_states,"sim_noise_more_nonLog.RDS")
##### re-run with even more noise #####
# in particular we are going to bump up the variation in all standard deviations related to boosting and waning by 50%
model_pars_original[1,] <- c("ifxn","HAI","boost_long",4,1,"log-normal")
model_pars_original[2,] <- c("ifxn","HAI","boost_short",0.75,.1,"log-normal")
model_pars_original[3,] <- c("ifxn","HAI","wane_long",.0001,.0001,"log-normal")
model_pars_original[4,] <- c("ifxn","HAI","wane_short",.005,.001,"log-normal")
model_pars_original[5,] <- c("ifxn","HAI","biomarker_prot_midpoint",8,NA,"")
model_pars_original[6,] <- c("ifxn","HAI","biomarker_prot_width",.8,NA,"")
model_pars_original[7,] <- c(NA,"HAI","obs_sd",NA,.3,"normal")
model_pars_original[8,] <- c("ifxn","IgG","boost_long",5,30,"log-normal")
model_pars_original[9,] <- c("ifxn","IgG","boost_short",80,30,"log-normal")
model_pars_original[10,] <- c("ifxn","IgG","wane_long",.005,.005,"log-normal")
model_pars_original[11,] <- c("ifxn","IgG","wane_short",.02,.05,"log-normal")
model_pars_original[12,] <- c(NA,"IgG","obs_sd",NA,5,"normal")
model_pars_original[13,] <- c("ifxn","IgM","boost_long",5,30,"log-normal")
model_pars_original[14,] <- c("ifxn","IgM","boost_short",50,70,"log-normal")
model_pars_original[15,] <- c("ifxn","IgM","wane_long",.005,.005,"log-normal")
model_pars_original[16,] <- c("ifxn","IgM","wane_short",.005,.05,"log-normal")
model_pars_original[17,] <- c(NA,"IgM","obs_sd",NA,10,"normal")
model_pars_original[18,] <- c("ifxn","HAI","biomarker_ceiling_threshold",10,NA,"")
model_pars_original[19,] <- c("ifxn","HAI","biomarker_ceiling_gradient",.15,NA,"")
model_pars_original[20,] <- c("ifxn","IgG","biomarker_ceiling_threshold",80,NA,"")
model_pars_original[21,] <- c("ifxn","IgG","biomarker_ceiling_gradient",.01,NA,"")
model_pars_original[22,] <- c("ifxn","IgM","biomarker_ceiling_threshold",75,NA,"")
model_pars_original[23,] <- c("ifxn","IgM","biomarker_ceiling_gradient",.01,NA,"")
model_pars<-reformat_biomarker_map(model_pars_original)
model_pars$mean <- as.numeric(model_pars$mean)
model_pars$sd <- as.numeric(model_pars$sd)
set.seed(1)
res<- runserosim_update(
simulation_settings=list("t_start"=1,"t_end"=max(times)),
demography,
observation_times=tibble(i=rep(1:max(demography$i),each=3),t=rep(c(250,330,365),N)),
foe_pars,
biomarker_map,
model_pars,
exposure_model=exposure_model_fixed,
immunity_model=immunity_model_ifxn_biomarker_prot,
antibody_model=antibody_model_biphasic,
observation_model=observation_model_continuous_bounded_noise,
draw_parameters=draw_parameters_random_fx_biomarker_dep,
VERBOSE = T,
## Other arguments needed
max_events=c(4),
bounds=bounds
)
# get into right format and save as RDS
observed_states <- res$observed_biomarker_states
observed_states <- reshape(observed_states[,-4],idvar=c("i","b"),timevar = c("t"),direction="wide")
observed_states <- reshape(observed_states,idvar=c("i"),timevar = c("b"),direction="wide")
names(observed_states) <- c("i","HAI_t1","HAI_t2","HAI_t3","IgG_t1","IgG_t2","IgG_t3","IgM_t1","IgM_t2","IgM_t3")
infectedHosts <- res$immune_histories_long[(res$immune_histories_long$t>300)&(res$immune_histories_long$value==1),]$i
observed_states <- observed_states %>% mutate(infected = if_else(i %in% infectedHosts,1,0))
observed_states <- observed_states %>% mutate(numInfections = rowSums(data.frame(res$immune_histories),na.rm = T))
# plot each biomarker pre/post infection
p1 <- ggplot(observed_states,aes(x=HAI_t2,y=HAI_t3,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = 'log2') +
scale_y_continuous(trans = 'log2') +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p2 <- ggplot(observed_states,aes(x=IgG_t2+1,y=IgG_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p3 <- ggplot(observed_states,aes(x=IgM_t2+1,y=IgM_t3+1,col=as.factor(infected))) +
geom_point() +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
theme_minimal(base_size = 20) + guides(col=guide_legend("Inf."))
p1 + p2 + p3 + plot_layout(guides = "collect")
saveRDS(observed_states,"sim_noise_even_more_nonLog.RDS")
