control = partitional_control(nrep = 10L))
# Cluster validity indices
sapply(pc.l2, cvi, b = labels)
hc.l2 <- tsclust(series, type = "hierarchical",
k = 4L, trace = TRUE,
control = hierarchical_control(method = "all",
distmat = pc.l2[[1L]]@distmat))
# Plot the best dendrogram according to variation of information
plot(hc.l2[[which.min(sapply(hc.l2, cvi, b = labels, type = "VI"))]])
mv <- CharTrajMV[1L:20L]
# Using GAK distance
mvc <- tsclust(mv, k = 4L, distance = "gak", seed = 390,
args = tsclust_args(dist = list(sigma = 100)))
# Note how the variables of each series are appended one after the other in the plot
plot(mvc)
mv
pc.tadp <- tsclust(series, type = "tadpole", k = 4L,
control = tadpole_control(dc = 1.5,
window.size = 18L))
# Modify plot, show only clusters 3 and 4
plot(pc.tadp, clus = 3:4,
labs.arg = list(title = "TADPole, clusters 3 and 4",
x = "time", y = "series"))
# Saving and modifying the ggplot object with custom time labels
require(scales)
t <- seq(Sys.Date(), len = length(series[[1L]]), by = "day")
gpc <- plot(pc.tadp, time = t, plot = FALSE)
gpc + ggplot2::scale_x_date(labels = date_format("%b-%Y"),
breaks = date_breaks("2 months"))
mv
c(mv$A.V1,mv$A.V2,mv$A.V3)
plot(c(mv$A.V1,mv$A.V2,mv$A.V3))
plot(c(mv$A.V1,mv$A.V2,mv$A.V3),type="l")
gpc + ggplot2::scale_x_date(labels = date_format("%b-%Y"),
plot(mvc)
plot(c(mv$A.V1,mv$A.V2,mv$A.V3),type="l")
mv
plot(c(unlist(mv$A.V1)),type="l")
hold <- sim_data[1,]
hold
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
df
lapply(1:10,FUN = function(x){
hold <- sim_data[x,]
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
return(df)
})
mv <- lapply(1:length(sim_data$i),FUN = function(x){
hold <- sim_data[x,]
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
return(df)
})
mv
mvc <- tsclust(mv, k = 2L, distance = "gak", seed = 1,
args = tsclust_args(dist = list(sigma = 100)))
plot(mvc)
mvc <- tsclust(mv, k = 4L, distance = "gak", seed = 1,
args = tsclust_args(dist = list(sigma = 100)))
plot(mvc)
mvc
mvc <- tsclust(mv, k = 4, distance = "gak", seed = 1,
args = tsclust_args(dist = list(sigma = 100)))
mvc
mvc <- tsclust(mv, k = 3L, distance = "gak", seed = 1,
args = tsclust_args(dist = list(sigma = 100)))
mvc
hc.l2 <- tsclust(mv, type = "hierarchical",
k = 4L, trace = TRUE,
control = hierarchical_control(method = "all",
distmat = pc.l2[[1L]]@distmat))
hc.l2 <- tsclust(mv, type = "hierarchical",
hc.l2 <- tsclust(mv, type = "hierarchical",
k = 4L, trace = TRUE,
control = hierarchical_control(method = "all"))
hc.12
hc.l2
hc.l2 <- tsclust(mv, type = "hierarchical",
k = 3L, trace = TRUE,
control = hierarchical_control(method = "all"))
hc.l2
hc.l2 <- tsclust(mv, type = "hierarchical",
k = 2L, trace = TRUE,
control = hierarchical_control(method = "all"))
hc.l2
pc.l2 <- tsclust(series, k = 4L,
distance = "L2", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(nrep = 10L))
pc.l2
pc.l2 <- tsclust(mv, k = 4L,
distance = "L2", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(nrep = 10L))
pc.tadp <- tsclust(mv, type = "tadpole", k = 4L,
control = tadpole_control(dc = 1.5,
window.size = 18L))
mvc <- tsclust(mv, k = 4L, distance = "gak", seed = 1)
plot(mvc)
mvc
mvc <- tsclust(mv, k = 2L:5L, distance = "gak", seed = 1)
plot(mvc)
mvc
mvc <- tsclust(mv, k = 2L:5L, distance = "gak", seed = 1,norm="L2")
names(mvc) <- paste0("k_",10L:20L)
names(mvc) <- paste0("k_",2L:5L)
sapply(mvc, cvi, type = "internal")
?cvi
pos_stan_df <- sim_data %>% filter(prob2>=.5)
mv <- lapply(1:length(sim_data$i),FUN = function(x){
hold <- pos_stan_df[x,]
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
return(df)
})
mvc <- tsclust(mv, k = 2L:5L, distance = "gak", seed = 1)
mv
pos_stan_df <- sim_data %>% filter(prob2>=.5)
mv <- lapply(1:length(pos_stan_df$i),FUN = function(x){
hold <- pos_stan_df[x,]
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
return(df)
})
mvc <- tsclust(mv, k = 2L:5L, distance = "gak", seed = 1)
plot(mvc)
names(mvc) <- paste0("k_",2L:5L)
sapply(mvc, cvi, type = "internal")
mvc
mvc$k_2
mvc$k_2@cluster
table(mvc$k_2@cluster,pos_stan_df$numInfections
)
mvc <- tsclust(mv, k = 1L:5L, distance = "gak", seed = 1)
names(mvc) <- paste0("k_",1L:5L)
mv <- lapply(1:length(pos_stan_df$i),FUN = function(x){
hold <- pos_stan_df[x,]
df = data.frame("HAI" = c(hold$HAI_t2,hold$HAI_t3),
"IgG" = c(hold$IgG_t2,hold$IgG_t3),
"IgM" = c(hold$IgM_t2,hold$IgM_t3))
return(df)
})
mvc <- tsclust(mv, k = 1L:5L, distance = "gak", seed = 1)
mvc <- tsclust(mv, k = 2L:5L, distance = "gak", seed = 1)
names(mvc) <- paste0("k_",2L:5L)
sapply(mvc, cvi, type = "internal")
plot(mvc)
plot(mvc$k_2)
table(mvc$k_2@cluster,pos_stan_df$numInfections)
mixtools::multmixEM(pos_stan_df_subset)
mixtools::multmixEM(pos_stan_df)
pos_stan_df
mixtools::multmixEM(pos_stan_df,k = 3)
mixtools::multmixEM(pos_stan_df_subset,k = 3)
mixtools::multmixEM(pos_stan_df_subset,k = 2)
mixtools::multmixEM(pos_stan_df_subset,k = 4)
mixtools::multmixEM(pos_stan_df_subset,k = 5)
mvmix_stan_k2 <- pos_stan_df %>% dplyr::select(c("avg_D_HAI","avg_C_best",
"DEN_G","IgG_C_DEN",
"DEN_M","IgM_C_DEN",
"max_div","IgM_div","IgG_div",
"IgM_IgG_A_div","IgM_IgG_C_div")) %>% mvnormalmixEM(k = 2,arbvar = F)
pos_stan_df
mvmixk2 <- stan_df %>% filter(prob2>.5) %>% dplyr::select(c("avg_D_HAI","avg_C_best",
"DEN_G","IgG_C_DEN",
"DEN_M","IgM_C_DEN",
"max_div","IgM_div","IgG_div",
"IgM_IgG_A_div","IgM_IgG_C_div")) %>% mvnormalmixEM(k = 2,arbvar = F)
pos_stan_df <- sim_data %>% filter(prob2>=.5)
pos_stan_df$avg_D_HAI <- (pos_stan_df$HAI_t2)
pos_stan_df$avg_C_best <- (pos_stan_df$HAI_t3)
pos_stan_df$DEN_G <- (pos_stan_df$IgG_t2)
pos_stan_df$DEN_M <- (pos_stan_df$IgM_t2)
pos_stan_df$IgG_C_DEN <- log10(pos_stan_df$IgG_t3)
pos_stan_df$IgM_C_DEN <- log10(pos_stan_df$IgM_t3)
pos_stan_df$max_div <- 2^(pos_stan_df$avg_C_best)/2^(pos_stan_df$avg_D_HAI)
pos_stan_df$IgM_div <- 10^(pos_stan_df$IgM_t3)/10^(pos_stan_df$IgM_t2)
pos_stan_df$IgG_div <- 10^(pos_stan_df$IgG_t3)/10^(pos_stan_df$IgG_t2)
pos_stan_df$IgM_IgG_A_div <- 10^(pos_stan_df$DEN_M)/10^(pos_stan_df$DEN_G)
pos_stan_df$IgM_IgG_C_div <- 10^(pos_stan_df$IgM_C_DEN)/10^(pos_stan_df$IgG_C_DEN)
pos_stan_df_subset <- scale(pos_stan_df[,c("avg_D_HAI","avg_C_best",
"DEN_G","IgG_C_DEN",
"DEN_M","IgM_C_DEN",
"max_div","IgM_div","IgG_div",
"IgM_IgG_A_div","IgM_IgG_C_div")])
mvmix_stan_k2 <- pos_stan_df_subset %>% mvnormalmixEM(k = 2,arbvar = F)
mvmix_stan_k2
mvmix_stan_k2 <- pos_stan_df_subset %>% mvnormalmixEM(k = 2,arbvar = F)
pos_stan_df$k2_p1 <- mvmix_stan_k2$posterior[,1]
pos_stan_df$k2_p2 <- mvmix_stan_k2$posterior[,2]
pos_stan_df <- pos_stan_df %>%
dplyr::rowwise() %>%
dplyr::mutate(k2_mak=as.factor(which.max(dplyr::c_across(k2_p1:k2_p2))))
print(table(pos_stan_df$k2_mak,pos_stan_df$numInfections))
print(table(pos_stan_df$k2_mak,pos_stan_df$numInfections==1))
print(table(pos_stan_df$k2_mak,pos_stan_df$numInfections>1))
print(table(pos_stan_df$k2_mak,pos_stan_df$numInfections>1,dnn = c("pred",'truth')))
# Build model with k clusters: km.out
km.out <- kmeans(pos_stan_df_subset, centers = 2, nstart = 20)
pos_stan_df$cluster2 <- km.out$cluster
km.out$cluster
source("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/primary_secondary_prediction.R", echo=TRUE)
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_groundTruth.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_groundTruth_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
i
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_groundTruth_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_groundTruth_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
library(mixtools)
library(dtwclust)
### prediction on simulated data #####
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_groundTruth.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_groundTruth_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
dim(sim_data_test)[1]
table(sampall)
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_noise.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
print(dim(sim_data_test)[1])}
i=1
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- stanout$draws()
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
sampall
table(sampall)
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_noise_more.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_noise_more_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
library(cmdstanr)
library(tidyverse)
library(ggmcmc)
library(bayesplot)
library(viridis)
library(ggpubr)
library(scales)
##### get data and define #####
stan_df <- readRDS("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/stan_df.RDS")
stan_df$prob1 <- 0
stan_df$prob2 <- 0
stan_df$mak <- 0
stan_df <- stan_df %>% mutate(final_interp=if_else((PCRconf==1)|
(HAI_interp %in% c("Acute primary dengue infection","Acute secondary dengue infection"))|
(EIA_interp %in% c("Acute primary dengue infection","Acute secondary dengue infection")),"DENV+",
if_else((PCRconf==0)&
(HAI_interp %in% c("No flavivirus infection"))&
(EIA_interp %in% c("No flavivirus infection")),"DENV-","mixed")))
##### create dataframe with results  #####
allResults <- data.frame(datainput = character(),
sensitivity_final = numeric(),
specificity_final = numeric(),
F1_final = numeric(),
sensitivity_PCRpos = numeric(),
specificity_PCRpos = numeric(),
F1_PCRpos = numeric(),
sensitivity_HAI = numeric(),
specificity_HAI = numeric(),
F1_HAI = numeric(),
sensitivity_EIA = numeric(),
specificity_EIA = numeric(),
F1_EIA = numeric(),
mixedPropPos = numeric(),
mixedNumPos = numeric())
# function to get data  #####
returnResults <- function(stan_df){
holdvec <- c()
eval <- c("final_interp","PCRconf","HAI_interp","EIA_interp")
evalComp <- list(final = c("DENV+"),
PCRconf = c(1),
HAI = c("Acute primary dengue infection","Acute secondary dengue infection","Recent dengue infection"),
EIA = c("Acute primary dengue infection","Acute secondary dengue infection"))
for(j in 1:length(eval)){
# get metrics
TP = sum(stan_df[stan_df[,eval[j]] %in% evalComp[[j]],]$prob2>=.5)
FP = sum(stan_df[!(stan_df[,eval[j]] %in% evalComp[[j]]),]$prob2>=.5)
FN = sum(stan_df[stan_df[,eval[j]] %in% evalComp[[j]],]$prob2<.5)
TN = sum(stan_df[!(stan_df[,eval[j]] %in% evalComp[[j]]),]$prob2<.5)
# compute metrics
sensitivity = TP/(TP+FP)
specificity = TN/(TN+FN)
F1val = (2*TP)/(2*TP + FP + FN)
holdvec <- c(holdvec,c(sensitivity,specificity,F1val))
}
return(c(holdvec,mean(stan_df[stan_df$final_interp=="mixed",]$prob2>=.5),sum(stan_df[stan_df$final_interp=="mixed",]$prob2>=.5)))
}
## figure 1 -- plot all with PCR response #####
p1 <- ggplot(stan_df,aes(x=(avg_D_HAI),y=(avg_C_best),col=as.factor(PCRconf))) +
geom_jitter(width = .1,height=.1) +
xlab("Acute GMHAI") + ylab("Conv. GMHAI") +
theme_pubr(base_size = 20) +
scale_x_continuous(trans="log2") +
scale_y_continuous(trans="log2") +
scale_color_viridis_d(option = "A",end = .7,labels = c("PCR -", "PCR +")) +
guides(color = guide_legend(title = "", title.position = "top"))
p2 <- ggplot(stan_df,aes(x=(DEN_M+1),y=(IgM_C_DEN+1),col=as.factor(PCRconf))) +
geom_jitter(width = .01,height=.01) +
xlab("Acute IgM") + ylab("Conv. IgM") +
theme_pubr(base_size = 20) +
scale_x_continuous(trans="log10") +
scale_y_continuous(trans="log10") +
scale_color_viridis_d(option = "A",end = .7,labels = c("PCR -", "PCR +")) +
guides(color = guide_legend(title = "", title.position = "top"))
p3 <- ggplot(stan_df,aes(x=(DEN_G+1),y=(IgG_C_DEN+1),col=as.factor(PCRconf))) +
geom_jitter(width = .01,height=.01)  +
xlab("Acute IgG") + ylab("Conv. IgG")   +
theme_pubr(base_size = 20) +
scale_x_continuous(trans="log10") +
scale_y_continuous(trans="log10") +
scale_color_viridis_d(option = "A",end = .7,labels = c("PCR -", "PCR +")) +
guides(color = guide_legend(title = "", title.position = "top"))
p4 <- ggplot(stan_df,aes(x=(DEN_M+1)/(DEN_G+1),y=(IgM_C_DEN+1)/(IgG_C_DEN+1),col=as.factor(PCRconf))) +
geom_jitter(width = .01,height=.01) +
xlab("Acute IgM/IgG") + ylab("Conv. IgM/IgG")  +
theme_pubr(base_size = 20) +
scale_x_continuous(trans="log10") +
scale_y_continuous(trans="log10") +
scale_color_viridis_d(option = "A",end = .7,labels = c("PCR -", "PCR +")) +
guides(color = guide_legend(title = "", title.position = "top"))
print(p1 + p2 + p3 + p4 + plot_layout(guides = "collect")  & theme(legend.position = 'top'))
ggsave("figure1_pcr.png",
path = "~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/figures",
dpi = 300,height=8,width=12,device = "png")
# figure 2 - simulation data #####
# data with no noise
sim_data <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_groundTruth.RDS"))
sim_data <- as.data.frame(sim_data)
sim_data$prob1 <- 0
sim_data$prob2 <- 0
sim_data$mak <- 0
set.seed(1)
sampall <- sample(1:4,size = length(sim_data$infected),replace = T)
for(i in 1:4){
# read in stan outpuut data and create posterior element
stanfile <- paste0("fit_multivariate_normal_2mix_semisupervised_testing_sim_groundTruth_",i,".RDS")
stanout <- readRDS(paste0("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_output/sim_results/",stanfile))
posterior <- as.array(stanout$draws())
# subset to training and testing data
sim_data_train <- sim_data[sampall!=i,]
sim_data_train <- sim_data_train %>% arrange(infected)
sim_data_test <- sim_data[sampall==i,]
# compare the predictionTest outputs to the "ground truth"
# first get out probs for two classes
sim_data_test$probs1 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2 - 1])}))
sim_data_test$probs2 = unlist(lapply(1:dim(sim_data_test)[1],FUN = function(x){median(stanout$draws(variables = "probabilitiesTest")[,,x*2])}))
sim_data_test<-sim_data_test %>%
dplyr::rowwise() %>%
dplyr::mutate(mak=which.max(dplyr::c_across(probs1:probs2))-1)
# add to original dataset for full analysis
sim_data$prob1[sampall==i] <- sim_data_test$probs1
sim_data$prob2[sampall==i] <- sim_data_test$probs2
sim_data$mak[sampall==i] <- sim_data_test$mak
}
setwd("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/stan_models")
set.seed(1)
whichdecile = i
sampall <- sample(1:4,size = length(sim_noise$infected),replace = T)
sim_noise <- readRDS("~/Documents/GitHub/DENV_modeling/Illness_inv_prob/Manuscript/data/sim_noise.RDS")
set.seed(1)
whichdecile = i
sampall <- sample(1:4,size = length(sim_noise$infected),replace = T)
table(sampall)
